//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;
using System.Text;

namespace beastie
{
	public static class StringUtil
	{

	
		public static string JoinStrings(this IEnumerable<object> source, 
		                                         string separator)
		{
			StringBuilder builder = new StringBuilder();
			bool first = true;
			//foreach (T element in source)
			foreach (object element in source)
			{
				if (first)
				{
					first = false;
				}
				else
				{
					builder.Append(separator);
				}
				builder.Append(element);
			}
			return builder.ToString();
		}

		/***
		 * Uppercases the first character, and lowercases the rest
		 */
		public static string TitleCaseOneWord(this string word) {
			if (word.Length > 1) {
				return char.ToUpperInvariant(word[0]) + word.Substring(1).ToLowerInvariant();
			} else {
				return word.ToUpperInvariant();
			}
		}

		/***
		 * Uppercases the first character and leaves the rest the same
		 */
		public static string UpperCaseFirstChar(this string word) {
			if (word.Length > 1) {
				return char.ToUpperInvariant(word[0]) + word.Substring(1);
			} else {
				return word.ToUpperInvariant();
			}
		}

		public static string NewspaperNumber(this int number) {
			var unitsMap = new[] { "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen" };

			if (number >= 0 && number <= 10) {
				return unitsMap[number];
			} else {
				return number.ToString();
			}

		}

		public static string CsvEscape(this string s, bool quoteRegardless=false) {
			if ( s.Contains( QUOTE ) )
				s = s.Replace( QUOTE, ESCAPED_QUOTE );

			if ( quoteRegardless || s.IndexOfAny( CHARACTERS_THAT_MUST_BE_QUOTED ) > -1 )
				s = QUOTE + s + QUOTE;

			return s;
		}

		public static string CsvUnescape(this string s )
		{
			if ( s.StartsWith( QUOTE ) && s.EndsWith( QUOTE ) )
			{
				s = s.Substring( 1, s.Length - 2 );

				if ( s.Contains( ESCAPED_QUOTE ) )
					s = s.Replace( ESCAPED_QUOTE, QUOTE );
			}

			return s;
		}
		private const string QUOTE = "\"";
		private const string ESCAPED_QUOTE = "\"\"";
		private static char[] CHARACTERS_THAT_MUST_BE_QUOTED = { ',', '"', '\n' };

	}


}

