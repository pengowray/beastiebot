//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;

using LinqToDB;
using LinqToDB.Mapping;

namespace beastie.beastieDB
{
	/// <summary>
	/// Database       : Beastie
	/// Data Source    : Beastie
	/// Server Version : 3.8.8.3
	/// </summary>
	public partial class BeastieDB : LinqToDB.Data.DataConnection
	{
		public ITable<DataImport>        DataImports       { get { return this.GetTable<DataImport>(); } }
		public ITable<NaturesWindowData> NaturesWindowData { get { return this.GetTable<NaturesWindowData>(); } }
		public ITable<NgramDepend>       NgramDepends      { get { return this.GetTable<NgramDepend>(); } }
		public ITable<WordDistancesData> WordDistancesData { get { return this.GetTable<WordDistancesData>(); } }
		public ITable<WordList>          WordLists         { get { return this.GetTable<WordList>(); } }
		public ITable<WordsData>         WordsData         { get { return this.GetTable<WordsData>(); } }

		public BeastieDB()
		{
			InitDataContext();
		}

		public BeastieDB(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();
	}

	[Table("DataImports")]
	public partial class DataImport
	{
		[PrimaryKey, Identity   ] public long   id                { get; set; } // integer
		[Column,        Nullable] public string fn                { get; set; } // text(max)
		[Column,        Nullable] public string source            { get; set; } // text(max)
		[Column,        Nullable] public string parameters        { get; set; } // text(max)
		[Column,        Nullable] public string table             { get; set; } // text(max)
		[Column,        Nullable] public long?  date_start        { get; set; } // integer
		[Column,        Nullable] public long?  date_complete     { get; set; } // integer
		[Column,        Nullable] public long?  date_del          { get; set; } // integer
		[Column,        Nullable] public string chksum            { get; set; } // text(max)
		[Column,        Nullable] public long?  parent_dataimport { get; set; } // integer
		[Column,        Nullable] public string log               { get; set; } // text(max)
		[Column,     NotNull    ] public long   continuing        { get; set; } // integer
		[Column,        Nullable] public string last_item_done    { get; set; } // text(max)

		#region Associations

		/// <summary>
		/// FK_DataImports_0_0
		/// </summary>
		[Association(ThisKey="parent_dataimport", OtherKey="id", CanBeNull=true, KeyName="FK_DataImports_0_0", BackReferenceName="FK_DataImports_0_0_BackReferences")]
		public DataImport FK_00 { get; set; }

		/// <summary>
		/// FK_WordDistancesData_0_0_BackReference
		/// </summary>
		[Association(ThisKey="id", OtherKey="dataimport", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<WordDistancesData> WordDistancesData00 { get; set; }

		/// <summary>
		/// FK_NaturesWindowData_0_0_BackReference
		/// </summary>
		[Association(ThisKey="id", OtherKey="dataimport", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<NaturesWindowData> NaturesWindowData00 { get; set; }

		/// <summary>
		/// FK_DataImports_0_0_BackReference
		/// </summary>
		[Association(ThisKey="id", OtherKey="parent_dataimport", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<DataImport> FK_DataImports_0_0_BackReferences { get; set; }

		/// <summary>
		/// FK_WordsData_0_0_BackReference
		/// </summary>
		[Association(ThisKey="id", OtherKey="dataimport", CanBeNull=true, IsBackReference=true)]
		public IEnumerable<WordsData> WordsData00 { get; set; }

		#endregion
	}

	[Table("NaturesWindowData")]
	public partial class NaturesWindowData
	{
		[PrimaryKey, Identity   ] public long   id              { get; set; } // integer
		[Column,     NotNull    ] public long   dataimport      { get; set; } // integer
		[Column,     NotNull    ] public string sci_name        { get; set; } // text(max)
		[Column,        Nullable] public string eng_common_name { get; set; } // text(max)
		[Column,        Nullable] public string other_eng_names { get; set; } // text(max)

		#region Associations

		/// <summary>
		/// FK_NaturesWindowData_0_0
		/// </summary>
		[Association(ThisKey="dataimport", OtherKey="id", CanBeNull=false, KeyName="FK_NaturesWindowData_0_0", BackReferenceName="NaturesWindowData00")]
		public DataImport FK_00 { get; set; }

		#endregion
	}

	[Table("NgramDepends")]
	public partial class NgramDepend
	{
		[PrimaryKey, Identity] public long   id                  { get; set; } // integer
		[Column,     Nullable] public long?  dataimport          { get; set; } // integer
		[Column,     Nullable] public string lemma               { get; set; } // text(max)
		[Column,     Nullable] public string left                { get; set; } // text(max)
		[Column,     Nullable] public string right               { get; set; } // text(max)
		[Column,     Nullable] public long?  match_count         { get; set; } // integer
		[Column,     Nullable] public long?  volume_count        { get; set; } // integer
		[Column,     Nullable] public long?  broader_match_count { get; set; } // integer
	}

	[Table("WordDistancesData")]
	public partial class WordDistancesData
	{
		[PrimaryKey, Identity   ] public long   id         { get; set; } // integer
		[Column,        Nullable] public long?  dataimport { get; set; } // integer
		[Column,     NotNull    ] public string word       { get; set; } // text(max)
		[Column,        Nullable] public string data       { get; set; } // text(max)

		#region Associations

		/// <summary>
		/// FK_WordDistancesData_0_0
		/// </summary>
		[Association(ThisKey="dataimport", OtherKey="id", CanBeNull=true, KeyName="FK_WordDistancesData_0_0", BackReferenceName="WordDistancesData00")]
		public DataImport FK_00 { get; set; }

		#endregion
	}

	[Table("WordList")]
	public partial class WordList
	{
		[PrimaryKey, Identity   ] public long   id      { get; set; } // integer
		[Column,     NotNull    ] public string word    { get; set; } // text(max)
		[Column,        Nullable] public string sources { get; set; } // text(max)
	}

	[Table("WordsData")]
	public partial class WordsData
	{
		[PrimaryKey, Identity   ] public long   id         { get; set; } // integer
		[Column,     NotNull    ] public long   dataimport { get; set; } // integer
		[Column,     NotNull    ] public string word       { get; set; } // text(max)
		[Column,        Nullable] public string wordRaw    { get; set; } // text(max)

		#region Associations

		/// <summary>
		/// FK_WordsData_0_0
		/// </summary>
		[Association(ThisKey="dataimport", OtherKey="id", CanBeNull=false, KeyName="FK_WordsData_0_0", BackReferenceName="WordsData00")]
		public DataImport FK_00 { get; set; }

		#endregion
	}

	public static partial class TableExtensions
	{
		public static DataImport Find(this ITable<DataImport> table, long id)
		{
			return table.FirstOrDefault(t =>
				t.id == id);
		}

		public static NaturesWindowData Find(this ITable<NaturesWindowData> table, long id)
		{
			return table.FirstOrDefault(t =>
				t.id == id);
		}

		public static NgramDepend Find(this ITable<NgramDepend> table, long id)
		{
			return table.FirstOrDefault(t =>
				t.id == id);
		}

		public static WordDistancesData Find(this ITable<WordDistancesData> table, long id)
		{
			return table.FirstOrDefault(t =>
				t.id == id);
		}

		public static WordList Find(this ITable<WordList> table, long id)
		{
			return table.FirstOrDefault(t =>
				t.id == id);
		}

		public static WordsData Find(this ITable<WordsData> table, long id)
		{
			return table.FirstOrDefault(t =>
				t.id == id);
		}
	}
}
